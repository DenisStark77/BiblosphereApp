def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

apply plugin: 'com.android.application'
apply plugin: 'io.fabric'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"
apply plugin: 'kotlin-android'

def keystorePropertiesFile = rootProject.file("key.properties")
def keystoreProperties = new Properties()
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

android {
    compileSdkVersion 28

    lintOptions {
        disable 'InvalidPackage'
    }

    defaultConfig {
        applicationId "com.biblosphere.biblosphere"
        minSdkVersion 20
        targetSdkVersion 27
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        multiDexEnabled true
    }

    signingConfigs {
        release {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
        }
    }

    flavorDimensions 'cpuArch'
    productFlavors {
        //Use with flutter build apk --target-platform=android-arm --flavor=arm7
        arm7 {
            dimension 'cpuArch'
            versionCode 11832
            ndk {
                abiFilter 'armeabi-v7a'
            }
        }

        //Use with flutter build apk --target-platform=android-arm64 --flavor=arm8
        arm8 {
            dimension 'cpuArch'
            versionCode 11864
            ndk {
                abiFilters 'arm64-v8a'
            }
        }
    }


    buildTypes {
        release {
            signingConfig signingConfigs.release

//        minifyEnabled true
//        useProguard true
//        proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

flutter {
    source '../..'
}

dependencies {
    def withoutSupportv4 = {exclude group: 'com.android.support'}

    testImplementation 'junit:junit:4.12'
    implementation 'com.android.support:support-v4:28.0.0'
    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation 'com.android.support:support-annotations:28.0.0'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    implementation 'com.android.support:multidex:1.0.3'
    implementation 'com.google.firebase:firebase-core:16.0.4', withoutSupportv4
    implementation 'com.google.firebase:firebase-auth:16.0.5', withoutSupportv4
    implementation 'com.google.firebase:firebase-firestore:17.1.2', withoutSupportv4
    implementation 'com.google.firebase:firebase-storage:16.0.4', withoutSupportv4
//    implementation 'com.crashlytics.sdk.android:crashlytics:2.9.5'
//    implementation 'com.google.firebase:firebase-firestore:17.1.0'
//    implementation 'com.google.firebase:firebase-auth:16.0.3'
//    implementation 'com.google.firebase:firebase-storage:16.0.1'
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

    /*
|    +--- androidx.annotation:annotation:1.0.0
|    \--- androidx.localbroadcastmanager:localbroadcastmanager:1.0.0
permission_handler
androidx.lifecycle:lifecycle-runtime
     */
}

configurations.all {
    resolutionStrategy {
        force 'com.android.support:support-v4:28.0.0'
        force 'com.android.support:appcompat-v7:28.0.0'
        force 'com.android.support:support-annotations:28.0.0'
    }
}

apply plugin: 'com.google.gms.google-services'
com.google.gms.googleservices.GoogleServicesPlugin.config.disableVersionCheck = true
